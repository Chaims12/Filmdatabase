import csv

# Class definitions
class Review:
    def __init__(self, author, description, score):
        if not (0 <= score <= 10):
            raise ValueError("Score must be between 0 and 10.")
        self.author = author
        self.description = description
        self.score = score

class Film:
    def __init__(self, title, director, release_year, genre):
        self.title = title
        self.director = director
        self.release_year = release_year
        self.genre = genre
        self.reviews = []

    def add_review(self, review):
        if not isinstance(review, Review):
            raise TypeError("Only Review objects can be added.")
        self.reviews.append(review)
        print(f"Review by {review.author} added to film {self.title}.")

class FilmCollection:
    def __init__(self):
        self.films = []

    def add_film(self, film):
        self.films.append(film)

    def find_by_title(self, title):
        return [film for film in self.films if title.lower() in film.title.lower()]

    def find_by_director(self, director):
        return [film for film in self.films if director.lower() in film.director.lower()]

    def find_by_release_year(self, release_year):
        return [film for film in self.films if film.release_year == release_year]

# Helper functions
def load_films_from_csv(file_path):
    collection = FilmCollection()
    try:
        with open(file_path, mode='r', encoding='utf-8') as csv_file:
            reader = csv.DictReader(csv_file)
            for row in reader:
                film = Film(
                    title=row['title'],
                    director=row['director'],
                    release_year=int(row['release_year']),
                    genre=row['genre']
                )
                collection.add_film(film)
    except FileNotFoundError:
        print(f"File {file_path} not found.")
    except KeyError as e:
        print(f"Missing expected column in CSV: {e}")
    return collection

def create_review():
    try:
        author = input("Enter author name: ")
        description = input("Enter review description: ")
        score = float(input("Enter score (0-10): "))
        return Review(author, description, score)
    except ValueError as e:
        print(f"Error creating review: {e}")
        return None

def main():
    print("Welcome to Rotten Potatoes!")
    collection = load_films_from_csv('films.csv')

    while True:
        print("\nMenu:")
        print("1. Add a review to a film")
        print("2. Search for films by title")
        print("3. List films by director")
        print("4. List films by release year")
        print("5. Exit")
        
        choice = input("Enter your choice: ")

        if choice == "1":
            title = input("Enter the title of the film to add a review: ")
            matching_films = collection.find_by_title(title)
            if not matching_films:
                print("No matching films found.")
            else:
                print("Matching films:")
                for i, film in enumerate(matching_films, start=1):
                    print(f"{i}. {film.title} ({film.release_year}) by {film.director}")
                index = int(input("Select a film by number: ")) - 1
                if 0 <= index < len(matching_films):
                    review = create_review()
                    if review:
                        matching_films[index].add_review(review)
                else:
                    print("Invalid selection.")

        elif choice == "2":
            title = input("Enter part of the film title to search: ")
            matching_films = collection.find_by_title(title)
            if matching_films:
                print("Matching films:")
                for film in matching_films:
                    print(f"{film.title} ({film.release_year}) by {film.director}")
            else:
                print("No matching films found.")

        elif choice == "3":
            director = input("Enter director's name: ")
            matching_films = collection.find_by_director(director)
            if matching_films:
                print("Films by this director:")
                for film in matching_films:
                    print(f"{film.title} ({film.release_year})")
            else:
                print("No films found by this director.")

        elif choice == "4":
            try:
                release_year = int(input("Enter release year: "))
                matching_films = collection.find_by_release_year(release_year)
                if matching_films:
                    print(f"Films from {release_year}:")
                    for film in matching_films:
                        print(f"{film.title} by {film.director}")
                else:
                    print(f"No films found from {release_year}.")
            except ValueError:
                print("Please enter a valid year.")

        elif choice == "5":
            print("Exiting application.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
    
